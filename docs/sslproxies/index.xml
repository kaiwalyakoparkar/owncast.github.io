<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SSL &amp; HTTP Proxies on</title><link>/docs/sslproxies/</link><description>Recent content in SSL &amp; HTTP Proxies on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/docs/sslproxies/index.xml" rel="self" type="application/rss+xml"/><item><title>Caddy</title><link>/docs/sslproxies/caddy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sslproxies/caddy/</guid><description>Caddy is the fastest way to setup a SSL reverse proxy with a free certificate from Let&amp;rsquo;s Encrypt.
While we will try to walk you through some installation steps it is highly suggested you follow Caddy&amp;rsquo;s Install options and Reverse Proxy Quickstart for more documentation, examples and detailed information. Caddy is a well documented quality piece of software that you should get familiar with if you need to run a SSL reverse proxy.</description></item><item><title>HAProxy</title><link>/docs/sslproxies/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sslproxies/haproxy/</guid><description>Setup websocket on HAproxy could be tricky. Here is a working configuration:
haproxy.cfg
global log /dev/log local0 chroot /var/lib/haproxy user haproxy group haproxy daemon # Default SSL material locations ca-base /etc/ssl/certs crt-base /etc/ssl/private # See: https://ssl-config.mozilla.org/#server=haproxy&amp;amp;server-version=2.0.3&amp;amp;config=intermediate ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384 ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256 ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets nbproc 4 maxconn 16384 defaults log global mode http option httplog timeout tunnel 1h timeout client 5s timeout server 60s timeout connect 5s timeout queue 5s frontend tls bind :443 accept-proxy ssl crt /etc/haproxy/certs ssl-min-ver TLSv1.</description></item><item><title>lighttpd</title><link>/docs/sslproxies/lighttpd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sslproxies/lighttpd/</guid><description>lighttpd is a light HTTP server which can be configured as a suitable reverse proxy via the mod_proxy module.
SSL An implementation of SSL support via the mod_openssl module using OpenSSL may appear as follows:
$SERVER[&amp;#34;socket&amp;#34;] == &amp;#34;[::]:443&amp;#34; { ssl.engine = &amp;#34;enable&amp;#34; ssl.cipher-list = &amp;#34;HIGH&amp;#34; $HTTP[&amp;#34;host&amp;#34;] == &amp;#34;owncast.yourdomain.com&amp;#34; { ssl.pemfile = &amp;#34;/etc/letsencrypt/live/yourdomain.com/fullchain.pem&amp;#34; ssl.privkey = &amp;#34;/etc/letsencrypt/live/yourdomain.com/privkey.pem&amp;#34; ssl.dh-file = &amp;#34;/etc/letsencrypt/ssl-dhparams.pem&amp;#34; } } Reverse Proxy Proxying of incoming websocket connections is integrated with the module.</description></item><item><title>NGINX</title><link>/docs/sslproxies/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sslproxies/nginx/</guid><description>NGINX is a popular web server used as a reverse proxy with free Let&amp;rsquo;s Encrypt certificates. Visit the official documentation for detailed instructions.
Websockets People often look over the need to tell NGINX to proxy websockets correctly, leading to chat being disabled. Please read the quick documentation by nginx around websocket support to make sure you&amp;rsquo;re doing it properly.
Essentially, you&amp;rsquo;ll need to edit /etc/nginx/nginx.conf to add the following map block to the http section http { .</description></item><item><title>Apache</title><link>/docs/sslproxies/apache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sslproxies/apache/</guid><description>Apache requires the most boilerplate configuration, but if you&amp;rsquo;re already using Apache as a web server you can configure it as a reverse proxy in front of your Owncast server to enable SSL.
Ensure required Apache modules are enabled using the a2enmod command.
$ sudo a2enmod proxy proxy_http proxy_wstunnel ssl &amp;lt;VirtualHost \*:80&amp;gt; ServerName live.example.com ServerAdmin admin@example.com RewriteEngine on RewriteCond %{SERVER_NAME} =live.example.com RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent] &amp;lt;/VirtualHost&amp;gt; # live-le-ssl.conf &amp;lt;IfModule mod_ssl.c&amp;gt; &amp;lt;VirtualHost *:443&amp;gt; ServerName live.</description></item><item><title>Site.js</title><link>/docs/sslproxies/sitejs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sslproxies/sitejs/</guid><description>Site.js is a toolset by the Small Technology Foundation that allows you to easily setup a production web server. Additionally it can install Owncast for you, supporting SSL, configured to run as a service.
Visit the install using Site.js page for more details.</description></item></channel></rss>